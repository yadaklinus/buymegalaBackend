// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified DateTime?
  image         String?

  // Custom fields
  username      String?   @unique
  role          Role      @default(USER)

  bio String?

  galaPrice      Int?
  goLive Boolean @default(false)

  pin String?

  // Payout / checkout details
  bankName      String?
  accountNumber String?
  accountName   String?
  bvn           String? // optional, later stage

  // Relations
  accounts      Account[]
  sessions      Session[]
  supports      Support[] // payments received
  wallet Wallet[]
  transaction Transaction[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}



model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  
  access_token      String?  
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Support {
  id          String   @id @default(cuid())
  amount      Int      // amount in kobo (₦1000 = ₦10)
  message     String?
  supporter   String?  // name/email of buyer (optional if anonymous)

  // Relations
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  transactionId String? @unique// from Flutterwave
  status        PaymentStatus @default(PENDING)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  balance   Int      @default(0) // in kobo
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt DateTime @updatedAt
}

model Transaction {
  id            String   @id @default(cuid())
  userId        String
  type          TransactionType
  amount        Int
  status        PaymentStatus @default(PENDING)
  reference     String @unique // Flutterwave ref
  description   String?
  isWithdrawal  Boolean  @default(false)
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
}

enum TransactionType {
  CREDIT // money in
  DEBIT  // payout
}


// ============================
// Enums
// ============================
enum Role {
  USER
  ADMIN
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}